'''
Load Australian epi data
'''

import matplotlib
import matplotlib.pyplot as plt
matplotlib.use('Agg')
matplotlib.use('TkAgg')
import pandas as pd
import sciris as sc
import covasim as cv
import utils, load_parameters, load_pop
import numpy as np

def get_distributions(databook_path):
    import pandas as pd
    import os
    """
        Pull household and age distributions from input data
    """
    dirname = os.path.dirname(os.path.abspath(__file__))
    reference = pd.read_excel(dirname + '/' + databook_path, sheet_name='age_sex')['Total']
    reference.iloc[0:18] = 0
    reference.iloc[18:28] = reference.iloc[18:28] * np.linspace(0.1, 1, 10)

    household_dist = pd.read_excel(dirname + '/' + databook_path, sheet_name='households')['no. households']  # Household size distribution
    # calculate the population size generated by the household data, so that the household distribution can be scaled based no model population
    household_dist.index = household_dist.index + 1  # Convert from index to number of people in the household (starting at 1)
    # Calculate the number of households we need to fill to meet the population size requirement
    #n_households = (pop_size * (household_dist / sum(household_dist.index * household_dist))).round().astype(int)
    #n_households[1] += pop_size - sum(n_households * n_households.index)  # Adjust single-person households to fill the gap

    age_dist_vals = pd.read_excel(dirname + '/' + databook_path, sheet_name='age_sex')['Total']  # Household size distribution
    age_dist = np.array((age_dist_vals.values))
    return household_dist.values, age_dist



verbose    = 1
seed       = 1


# load parameters
state, start_day, end_day, n_days, date, folder, file_path, data_path, databook_path, popfile, pars, metapars, \
population_subsets, trace_probs, trace_time = load_parameters.load_pars()

# Process and read in data
sd, i_cases, daily_tests = load_parameters.load_data(databook_path=databook_path, start_day=start_day, end_day=end_day, data_path=data_path)

#### diagnose population structure
popdict = load_pop.get_australian_popdict(databook_path, pop_size=pars['pop_size'], contact_numbers=pars['contacts'], population_subsets = population_subsets)
sc.saveobj(popfile, popdict)

house_dist, age_dist = get_distributions(databook_path)

s_struct, w_struct, c_struct, church_struct = [],[],[],[]
h_struct = np.zeros(6)
age_struct = np.zeros(115)
for i in range(0,pars['pop_size']-1):
    if (popdict['age'][i] >= 5 and popdict['age'][i] <= 18):
        s_struct.append(len(popdict['contacts'][i]['S']) + 1)
    if (popdict['age'][i] >= 18 and popdict['age'][i] <= 65):
        w_struct.append(len(popdict['contacts'][i]['W']) + 1)
    c_struct.append(len(popdict['contacts'][i]['C']) + 1)
    church_struct.append(len(popdict['contacts'][i]['Church']) + 1)
    h_struct[len(popdict['contacts'][i]['H'])] += 1
    age_struct[popdict['age'][i]] += 1
h_struct = h_struct / np.array((1, 2, 3, 4, 5, 6)) # account for over counting of households
fig_pop1, axs1 = matplotlib.pyplot.subplots(2, 2, **{'figsize': (10,8)})
axs1[0, 0].bar(np.arange(0, 116), age_dist)
axs1[0, 0].set_title("Age distribution of Australian population")
axs1[0, 1].bar(np.arange(0, 115), age_struct)
axs1[0, 1].set_title("Age distribution of model population")
axs1[1, 0].bar(np.array(('1','2','3','4','5','6+')),house_dist)
axs1[1, 0].set_title("Australian household size distribution")
axs1[1, 1].bar(np.array(('1','2','3','4','5','6+')),h_struct)
axs1[1, 1].set_title("Model household size distribution")
plt.savefig(fname=file_path + 'compare_distributions.png')
plt.close()
fig_pop2, axs2 = matplotlib.pyplot.subplots(3, 1, **{'figsize': (10,10)})
axs2[0].hist(s_struct, bins=max(s_struct)-min(s_struct))
axs2[0].set_title("School-contact size distribution")
axs2[1].hist(w_struct, bins=max(w_struct)-min(w_struct))
axs2[1].set_title("Work-contact size distribution")
axs2[2].hist(c_struct, bins=max(c_struct)-min(c_struct))
axs2[2].set_title("Community-contact size distribution")

plt.savefig(fname=file_path + 'distributions.png')

